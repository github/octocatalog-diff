#!/usr/bin/env bash

# Unified 'cibuild' script for compatibility with Travis, to reduce the overall number
# of jobs for performance purposes. This script supports the rubocop testing (with
# RUBOCOP_TEST=true) and rspec testing (with RSPEC_TEST=true). It also supports testing
# with one or more Puppet versions, with PUPPET_VERSIONS set to a space-separated list
# of versions to test.

if [ -z "$PUPPET_VERSIONS" ]; then
  echo "Required PUPPET_VERSIONS!"
  exit 255
fi

[ -z "$RUBOCOP_TEST" ] && export RUBOCOP_TEST='true'
[ -z "$RSPEC_TEST" ] && export RSPEC_TEST='true'

echo 'Starting script/cibuild'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

echo "travis_fold:start:cibuild-environment-dump"
env
echo "travis_fold:end:cibuild-environment-dump"

# Create a temporary file to capture output of various steps.
function cleanup() {
  rm -f "${DIR}/.ruby-version"
}
trap cleanup EXIT

# Create "$DIR/.ruby-version" from the current ruby version, so it propagates through
# to the clean environment under which Puppet runs.
ruby -e "print RUBY_VERSION" > "${DIR}/.ruby-version"

# Bootstrapping
BOOTSTRAPPING_COUNTER=0
function bootstrap() {
  echo "travis_fold:start:bootstrap.${BOOTSTRAPPING_COUNTER}"
  time "${DIR}/script/bootstrap"
  bootstrap_exitcode=$?
  echo "travis_fold:end:bootstrap.${BOOTSTRAPPING_COUNTER}"

  if [ $? -ne 0 ]; then
    echo "Bootstrap failed!"
    exit 1
  fi

  let BOOTSTRAPPING_COUNTER=BOOTSTRAPPING_COUNTER+1
}

# This runs rubocop
if [ "$RUBOCOP_TEST" = "true" ]; then
  echo ""
  echo "-------------------------------"
  echo "Running rubocop tests"
  echo "-------------------------------"
  echo ""

  bootstrap
  time bundle exec rake rubocop
  RUBOCOP_EXITCODE=$?
  echo ""
else
  RUBOCOP_EXITCODE=-1
fi


# Run the test
if [ "$RSPEC_TEST" = "true" ]; then
  SAVED_PATH="$PATH"
  RSPEC_EXITCODE="0"
  COVERAGE_EXITCODE="0"
  for pv in $PUPPET_VERSIONS ; do
    export PUPPET_VERSION="$pv"

    echo ""
    echo "-------------------------------"
    echo "Running tests for Puppet ${PUPPET_VERSION}"
    echo "-------------------------------"
    echo ""

    # Set path to include the 'bin' directory of the bootstrapped checkout. This is so
    # 'rake' is in the path even if it wasn't installed with your Ruby version.
    export PATH="${DIR}/bin:${SAVED_PATH}"

    # Bootstrap
    bootstrap

    # Make sure `script/puppet` returns the desired puppet version
    pv_test=$( "${DIR}/script/puppet" --version 2>&1 )
    if [ $? -eq 0 ] && [ "$pv_test" = "$pv" ]; then
      echo "Confirmed Puppet version = ${pv_test}"
    else
      echo "Failures:"
      echo "- Unable to confirm that Puppet version = ${pv}"
      echo "$pv_test"
      RSPEC_EXITCODE=255
    fi

    # Run the tests
    echo "Running rspec unit tests"
    export COVERAGE=true
    time bundle exec rspec "${DIR}/spec/octocatalog-diff/tests"
    exitcode=$?
    unset COVERAGE
    if [ "$exitcode" -ne 0 ]; then RSPEC_EXITCODE="$exitcode"; fi

    # Quick coverage report
    cat "$DIR/coverage/coverage.txt"
    if grep -q "100% test coverage. You're all set, friend" "$DIR/coverage/coverage.txt"; then
      :
    else
      COVERAGE_EXITCODE=1
    fi
    echo ""

    # To avoid travis getting hung if it gets confused, we'll run each of these
    # scripts individually with a timeout. This will hopefully address the problem
    # of hung builds.
    echo "Running rspec integration tests"
    for file in "${DIR}"/spec/octocatalog-diff/integration/*_spec.rb; do
      retry=1
      for try in 1 2 3 ; do
        if [ $retry -eq 1 ]; then
          retry=0
          echo "$(basename "$file") try ${try}"
          "$DIR/script/timeout" 180 bundle exec rspec "$file"
          exitcode=$?
          if [ $exitcode -eq 124 ] && [ $try -eq 3 ]; then
            RSPEC_EXITCODE="255"
          elif [ $exitcode -eq 124 ] && [ $try -lt 3 ]; then
            retry=1
          elif [ $exitcode -ne 0 ]; then
            RSPEC_EXITCODE="$exitcode"
          fi
        fi
      done
    done
  done
  export PATH="$SAVED_PATH"
  unset PUPPET_VERSION
  rm -f "${DIR}/.puppet_version"
else
  RSPEC_EXITCODE=-1
  COVERAGE_EXITCODE=-1
  echo ""
fi

# Finish off script
echo "Finished script/cibuild:"
[ "$RUBOCOP_EXITCODE" -ge 0 ]  && echo "  - rubocop:  exit ${RUBOCOP_EXITCODE}"
[ "$RSPEC_EXITCODE" -ge 0 ]    && echo "  - rspec:    exit ${RSPEC_EXITCODE}"
[ "$COVERAGE_EXITCODE" -ge 0 ] && echo "  - coverage: exit ${COVERAGE_EXITCODE}"
if [ "$RUBOCOP_EXITCODE" -gt 0 ] || [ "$RSPEC_EXITCODE" -gt 0 ]; then
  exit 1
fi
if [ "$COVERAGE_EXITCODE" -gt 0 ] && [ "$ENFORCE_COVERAGE" == "true" ]; then
  exit 1
fi
exit 0
